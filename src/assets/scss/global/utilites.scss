.page-container {
  max-width: var(--site-width);
  margin-right: auto;
  margin-left: auto;
  padding: 1rem;

  img {
    display: flex;
    width: 100%;
    max-width: 700px;
    margin: 32px 32px;
    background-color: transparent;
  }
}

.shadow {
  box-shadow: var(--shadow);
}

.gradient-text {
  background: linear-gradient(130deg, #5183f5, #af002d 41.07%, #c79191 76.05%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.btn {
  padding: 10px 15px;
  border: none;
  border-radius: var(--border-radius-sm);
  background-color: var(--color-secondary);
  color: var(--color-text-alt);
  font-size: 14px;
  white-space: nowrap;

  &:hover, &:focus {
    border: none;
    filter: brightness(90%);
    color: var(--color-text-alt);
  }
}

.btn--sm {
  padding: 6px 8px;
}

.btn--outline {
  border: 1px solid var(--color-border);
  background-color: var(--color-bg);
  color: var(--color-text);

  :root[data-theme="dark"] & {
    border-color: var(--color-bg-secondary-dark);
    background-color: var(--color-bg-secondary-dark);
    color: var(--color-text-dark);
  }

  &:hover, &:focus {
    border: 1px solid var(--color-secondary);
    filter: none;
    background-color: var(--color-bg);
    color: var(--color-secondary);

    :root[data-theme="dark"] & {
      border: 1px solid var(--color-bg-secondary-dark);
      background-color: var(--color-bg-wrapper-bg-dark);
      color: var(--color-title-dark);
    }
  }
}

.btn--danger {
  background-color: var(--color-danger);
  color: var(--color-text-alt);

  :root[data-theme="dark"] & {
    background-color: var(--color-danger);
    color: var(--color-text-alt);
  }
}

.btn--danger:hover,
.btn--danger:focus {
  border: none;
  background-color: var(--color-danger);
  color: var(--color-text-alt);
  filter: brightness(90%);

  :root[data-theme="dark"] & {
    color: var(--color-text-alt);
  }
}

.header-anchor {
  float: left;
  font-size: .85em;
  padding-right: 0.23em;
  margin-top: 0.125em;

  @media (min-width: 1024px) {
    margin-left: -0.87em;
    opacity: 0;
  }
}

/*
---
name: Grid
category: Grid
---

The Grid-cell should be combined with a utils-size class for the specific breakpoint you want to target.

DO NOT apply dimension or offset utilities to the `Grid` element. All cell widths and offsets should be applied to child grid cells.

```grid.html
<div class="Grid">
  <div class="Grid-cell u-xsm-size1of2 u-borderAllSides">1of2</div>
  <div class="Grid-cell u-xsm-size1of2 u-borderAllSides">1of2</div>
  <div class="Grid-cell u-xsm-size1of3 u-borderAllSides">1of3</div>
  <div class="Grid-cell u-xsm-size1of3 u-borderAllSides">1of3</div>
  <div class="Grid-cell u-xsm-size1of3 u-borderAllSides">1of3</div>
  <div class="Grid-cell u-xsm-size1of4 u-borderAllSides">1of4</div>
  <div class="Grid-cell u-xsm-size1of4 u-borderAllSides">1of4</div>
  <div class="Grid-cell u-xsm-size1of4 u-borderAllSides">1of4</div>
  <div class="Grid-cell u-xsm-size1of4 u-borderAllSides">1of4</div>
</div>
```
*/

.Grid {
  display: flex;
  flex-wrap: wrap;
  margin: 0;
  // padding: 0; // previously 0
  text-align: left;
}

/*
---
name: Grid alignment
category: Grid
---

Modifiers:
- Grid--alignCenter: center align all grid cells
- Grid--alignRight: right align all grid cells
- Grid--alignMiddle: middle-align grid cells
- Grid--alignBottom: bottom-align grid cells

```gridalignment.html
<div class="Grid Grid--alignCenter">
  <div class="Grid-cell u-xsm-size1of2 u-bgColor--grey">Grid--alignCenter</div>
</div>

<div class="Grid Grid--alignRight">
  <div class="Grid-cell u-xsm-size1of2 u-bgColor--grey">Grid--alignRight</div>
</div>

<div class="Grid Grid--alignMiddle">
  <div class="Grid-cell u-xsm-size1of2 u-bgColor--grey">Grid--alignMiddle</div>
</div>

<div class="Grid Grid--alignBottom">
  <div class="Grid-cell u-xsm-size1of2 u-bgColor--grey">Grid--alignBottom</div>
</div>
```

```gridalignment.notes
- All content must be contained within child `Grid-cell` elements.
1. Account for browser defaults of elements that might be the root node of the component.
2. Remove inter-cell whitespace that appears between `inline-block` child elements.
3. Ensure consistent default alignment.
```
*/

.Grid--alignCenter {
  text-align: center;
}

.Grid--alignRight {
  text-align: right !important;
}

.Grid--alignMiddle > .Grid-cell {
  vertical-align: middle;
  align-self: center;
}

.Grid--alignBottom > .Grid-cell {
  vertical-align: bottom;
}


.Grid--equalHeight {
  display: flex;
  flex-wrap: wrap;

  > .Grid-cell {
    display: flex;
  }
}

.Grid--fit {
  display: flex;
  flex-wrap: wrap;
}

.Grid--fit > .Grid-cell {
  flex: 1 1 0;
}

.Grid--column {
  display: flex;
  flex-direction: column;
}

.FlexGrid {
  display: flex;
}

.FlexGrid--justifyCenter {
  justify-content: center;
}

.FlexGrid--justifyFlexEnd {
  justify-content: flex-end;
}

.FlexGrid-justifySpaceBetween {
  justify-content: space-between;
}

.FlexGrid-justifySpaceAround {
  justify-content: space-around;
}

.FlexGrid {
    &--alignCenter {
        align-items: center;
    }

    &--alignFlexEnd {
        align-items: flex-end;
    }

    &--alignFlexStart {
        align-items: flex-start;
    }
}

/*
---
name: Grid cell
category: Grid
---
The Grid-cell should be combined with a utils-size class for the specific breakpoint you want to target.

DO NOT apply dimension or offset utilities to the `Grid` element. All cell widths and offsets should be applied to child grid cells.

Modifiers:
- Grid-cell--center: horizontally center one unit
- Grid-cell--text-center: horizontally center text of one unit

```gridcell.html
<div class="Grid Grid--withGutter">
  <div class="Grid-cell Grid-cell--center u-xsm-size1of2 u-bgColor--grey">Center Cell</div>
  <div class="Grid-cell Grid-cell--text-center u-xsm-size1of2 u-bgColor--grey">Center Cell Text</div>
</div>
```

```gridcell.notes
No explicit width by default. Rely on combining `Grid-cell` with a dimension
utility or a component class that extends 'grid'.

1. Keeps content correctly aligned with the grid direction.
2. Controls vertical positioning of units.
3. Make cells full-width by default.
```
*/

.Grid-cell {
  box-sizing: border-box;
  margin-right: 0;
  margin-left: 0;
  padding-right: 0;
  padding-left: 0;
  text-align: left; /* 1 */
  vertical-align: top; /* 2 */
  width: 100%; /* 3 */
}

.Grid-cell--center {
  display: block;
  margin-right: auto;
  margin-left: auto;
}

.Grid-cell--text-center {
  text-align: center;
}

.Grid-cell--text-right {
    text-align: right;
    width: 100%;
}

.Grid--centered-row {
  flex-direction: row;
  flex-wrap: nowrap;
  align-items: center;
}